import './Grid.css.proxy.js';
/* src/Grid.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { onMount, createEventDispatcher } from "../web_modules/svelte.js";
import Grid from "./lib/Grid.js";
import Cell from "./Cell.js";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	child_ctx[14] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

// (48:4) {#each lines as _, x}
function create_each_block_1(ctx) {
	let cell;
	let current;

	cell = new Cell({
			props: {
				cell: /*grid*/ ctx[2].get(/*x*/ ctx[14], /*y*/ ctx[11])
			}
		});

	cell.$on("reveal", /*handleReveal*/ ctx[3]);
	cell.$on("flag", /*handleFlag*/ ctx[4]);

	return {
		c() {
			create_component(cell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(cell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const cell_changes = {};
			if (dirty & /*grid*/ 4) cell_changes.cell = /*grid*/ ctx[2].get(/*x*/ ctx[14], /*y*/ ctx[11]);
			cell.$set(cell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(cell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(cell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(cell, detaching);
		}
	};
}

// (47:2) {#each grid.cells as lines, y}
function create_each_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*lines*/ ctx[9];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*grid, handleReveal, handleFlag*/ 28) {
				each_value_1 = /*lines*/ ctx[9];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_style_value;
	let current;
	let each_value = /*grid*/ ctx[2].cells;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "style", div_style_value = `--top-offset: ${/*topOffset*/ ctx[0]}px`);
			attr(div, "data-reset", /*reset*/ ctx[1]);
			attr(div, "class", "svelte-1moi1gb");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*grid, handleReveal, handleFlag*/ 28) {
				each_value = /*grid*/ ctx[2].cells;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*topOffset*/ 1 && div_style_value !== (div_style_value = `--top-offset: ${/*topOffset*/ ctx[0]}px`)) {
				attr(div, "style", div_style_value);
			}

			if (!current || dirty & /*reset*/ 2) {
				attr(div, "data-reset", /*reset*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { height } = $$props;
	let { width } = $$props;
	let { bombs } = $$props;
	let { topOffset = 0 } = $$props;
	let { reset = false } = $$props;
	const dispatch = createEventDispatcher();

	onMount(() => {
		dispatch("cells", {
			remainingCells: grid.getMissingCells().length
		});

		dispatch("flags", {
			numberOfFlags: grid.getFlaggedCells().length,
			remainingCells: grid.getMissingCells().length
		});
	});

	const handleReveal = ({ detail: [x, y] }) => {
		$$invalidate(2, grid = grid.reveal(x, y));

		dispatch("cells", {
			remainingCells: grid.getMissingCells().length
		});

		if (grid.isGameOver()) {
			dispatch("gameOver");
		}
	};

	const handleFlag = ({ detail: [x, y] }) => {
		$$invalidate(2, grid = grid.flag(x, y));

		dispatch("flags", {
			numberOfFlags: grid.getFlaggedCells().length,
			remainingCells: grid.getMissingCells().length
		});
	};

	$$self.$$set = $$props => {
		if ("height" in $$props) $$invalidate(5, height = $$props.height);
		if ("width" in $$props) $$invalidate(6, width = $$props.width);
		if ("bombs" in $$props) $$invalidate(7, bombs = $$props.bombs);
		if ("topOffset" in $$props) $$invalidate(0, topOffset = $$props.topOffset);
		if ("reset" in $$props) $$invalidate(1, reset = $$props.reset);
	};

	let grid;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*height, width, bombs*/ 224) {
			$: $$invalidate(2, grid = Grid.random(height, width, bombs));
		}

		if ($$self.$$.dirty & /*reset, height, width, bombs*/ 226) {
			$: if (reset) {
				$$invalidate(2, grid = Grid.random(height, width, bombs));
			}
		}
	};

	return [topOffset, reset, grid, handleReveal, handleFlag, height, width, bombs];
}

class Grid_1 extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			height: 5,
			width: 6,
			bombs: 7,
			topOffset: 0,
			reset: 1
		});
	}
}

export default Grid_1;