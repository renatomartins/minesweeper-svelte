import './Status.css.proxy.js';
/* src/Status.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_render_callback,
	add_resize_listener,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	to_number
} from "../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let nav;
	let div0;
	let input0;
	let t0;
	let span0;
	let t2;
	let input1;
	let t3;
	let span1;
	let t4;
	let div1;
	let t6;
	let ul;
	let li0;
	let t7;
	let t8;
	let t9;
	let li1;
	let t10;
	let t11;
	let t12;
	let li2;
	let t13;
	let t14;
	let ul_resize_listener;
	let mounted;
	let dispose;

	return {
		c() {
			nav = element("nav");
			div0 = element("div");
			input0 = element("input");
			t0 = space();
			span0 = element("span");
			span0.textContent = "x";
			t2 = space();
			input1 = element("input");
			t3 = space();
			span1 = element("span");
			t4 = space();
			div1 = element("div");
			div1.textContent = `${status}`;
			t6 = space();
			ul = element("ul");
			li0 = element("li");
			t7 = text("◽️  ");
			t8 = text(/*missingCells*/ ctx[3]);
			t9 = space();
			li1 = element("li");
			t10 = text("🚩  ");
			t11 = text(/*usedFlags*/ ctx[5]);
			t12 = space();
			li2 = element("li");
			t13 = text("💣  ");
			t14 = text(/*numberOfBombs*/ ctx[4]);
			attr(input0, "type", "number");
			attr(input0, "min", "2");
			attr(input0, "max", "20");
			attr(span0, "class", "status__dimensions-separator svelte-1v96p09");
			attr(input1, "type", "number");
			attr(input1, "min", "2");
			attr(input1, "max", "20");
			attr(div0, "class", "status__options");
			attr(li0, "class", "status__info__item svelte-1v96p09");
			attr(li1, "class", "status__info__item svelte-1v96p09");
			attr(li2, "class", "status__info__item svelte-1v96p09");
			attr(ul, "class", "status__info svelte-1v96p09");
			add_render_callback(() => /*ul_elementresize_handler*/ ctx[8].call(ul));
			attr(nav, "class", "status svelte-1v96p09");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div0);
			append(div0, input0);
			set_input_value(input0, /*gridHeight*/ ctx[0]);
			append(div0, t0);
			append(div0, span0);
			append(div0, t2);
			append(div0, input1);
			set_input_value(input1, /*gridWidth*/ ctx[1]);
			append(nav, t3);
			append(nav, span1);
			append(nav, t4);
			append(nav, div1);
			append(nav, t6);
			append(nav, ul);
			append(ul, li0);
			append(li0, t7);
			append(li0, t8);
			append(ul, t9);
			append(ul, li1);
			append(li1, t10);
			append(li1, t11);
			append(ul, t12);
			append(ul, li2);
			append(li2, t13);
			append(li2, t14);
			ul_resize_listener = add_resize_listener(ul, /*ul_elementresize_handler*/ ctx[8].bind(ul));

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[6]),
					listen(input1, "input", /*input1_input_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*gridHeight*/ 1 && to_number(input0.value) !== /*gridHeight*/ ctx[0]) {
				set_input_value(input0, /*gridHeight*/ ctx[0]);
			}

			if (dirty & /*gridWidth*/ 2 && to_number(input1.value) !== /*gridWidth*/ ctx[1]) {
				set_input_value(input1, /*gridWidth*/ ctx[1]);
			}

			if (dirty & /*missingCells*/ 8) set_data(t8, /*missingCells*/ ctx[3]);
			if (dirty & /*usedFlags*/ 32) set_data(t11, /*usedFlags*/ ctx[5]);
			if (dirty & /*numberOfBombs*/ 16) set_data(t14, /*numberOfBombs*/ ctx[4]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			ul_resize_listener();
			mounted = false;
			run_all(dispose);
		}
	};
}

const defaultHeight = 4;
const defaultWidth = 4;
const status = "";

function instance($$self, $$props, $$invalidate) {
	let { gridHeight = localStorage.getItem("gridHeight") !== null
	? parseInt(localStorage.getItem("gridHeight") || "" + defaultHeight, 10)
	: defaultHeight } = $$props;

	let { gridWidth = localStorage.getItem("gridWidth") !== null
	? parseInt(localStorage.getItem("gridWidth") || "" + defaultWidth, 10)
	: defaultWidth } = $$props;

	let { height } = $$props;
	let { missingCells = 0 } = $$props;
	let { numberOfBombs = 0 } = $$props;
	let { usedFlags = 0 } = $$props;

	function input0_input_handler() {
		gridHeight = to_number(this.value);
		$$invalidate(0, gridHeight);
	}

	function input1_input_handler() {
		gridWidth = to_number(this.value);
		$$invalidate(1, gridWidth);
	}

	function ul_elementresize_handler() {
		height = this.clientHeight;
		$$invalidate(2, height);
	}

	$$self.$$set = $$props => {
		if ("gridHeight" in $$props) $$invalidate(0, gridHeight = $$props.gridHeight);
		if ("gridWidth" in $$props) $$invalidate(1, gridWidth = $$props.gridWidth);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("missingCells" in $$props) $$invalidate(3, missingCells = $$props.missingCells);
		if ("numberOfBombs" in $$props) $$invalidate(4, numberOfBombs = $$props.numberOfBombs);
		if ("usedFlags" in $$props) $$invalidate(5, usedFlags = $$props.usedFlags);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gridHeight, gridWidth*/ 3) {
			$: {
				localStorage.setItem("gridHeight", "" + gridHeight);
				localStorage.setItem("gridWidth", "" + gridWidth);
			}
		}
	};

	return [
		gridHeight,
		gridWidth,
		height,
		missingCells,
		numberOfBombs,
		usedFlags,
		input0_input_handler,
		input1_input_handler,
		ul_elementresize_handler
	];
}

class Status extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			gridHeight: 0,
			gridWidth: 1,
			height: 2,
			missingCells: 3,
			numberOfBombs: 4,
			usedFlags: 5
		});
	}
}

export default Status;