import './Popup.css.proxy.js';
/* src/Popup.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_slot,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_slot
} from "../web_modules/svelte/internal.js";

function create_if_block(ctx) {
	let section;
	let div0;
	let t0;
	let div2;
	let t1;
	let div1;
	let current;
	let if_block = /*title*/ ctx[0] && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			section = element("section");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			if (if_block) if_block.c();
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", "popup__backdrop svelte-lh2iiv");
			attr(div1, "class", "popup__actions");
			attr(div2, "class", "popup__content svelte-lh2iiv");
			attr(section, "class", "popup svelte-lh2iiv");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			append(section, t0);
			append(section, div2);
			if (if_block) if_block.m(div2, null);
			append(div2, t1);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div2, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (50:6) {#if title}
function create_if_block_1(ctx) {
	let h2;
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(/*title*/ ctx[0]);
			attr(h2, "class", "popup__title svelte-lh2iiv");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t, /*title*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*show*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*show*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*show*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { show = false } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("show" in $$props) $$invalidate(1, show = $$props.show);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [title, show, $$scope, slots];
}

class Popup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, show: 1 });
	}
}

export default Popup;